"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require("react");
var path = require('path');
var _ = require("lodash");

var groupBy = require("lodash/collection/groupBy");
var camelCase = require("lodash/string/camelCase");
var capitalize = require("lodash/string/capitalize");

var ExampleRow = React.createClass({
  displayName: "ExampleRow",
  render: function render() {
    return React.createElement(
      "td",
      _extends({ className: "example" }, this.props),
      this.props.children
    );
  }
});

var Styleguide = React.createClass({
  displayName: "Styleguide",

  getInitialState: function getInitialState() {
    return {
      categories: groupBy(this.props.json.props, "category")
    };
  },

  renderRowHeader: function renderRowHeader(id, heading) {
    return React.createElement(
      "tr",
      { key: "" + id + "-header", id: id },
      React.createElement(
        "th",
        null,
        heading
      ),
      React.createElement(
        "th",
        null,
        "Value"
      ),
      React.createElement(
        "th",
        null,
        "Examples"
      ),
      React.createElement(
        "th",
        null,
        "Usage"
      )
    );
  },

  renderRow: function renderRow(prop, example) {
    var name = prop.name;
    return React.createElement(
      "tr",
      { key: "" + prop.name + "-row" },
      React.createElement(
        "td",
        null,
        React.createElement(
          "code",
          null,
          name
        )
      ),
      React.createElement(
        "td",
        null,
        React.createElement(
          "code",
          null,
          prop.value
        )
      ),
      example,
      React.createElement(
        "td",
        { className: "description" },
        prop.comment
      )
    );
  },

  renderColor: function renderColor(props) {
    var _this = this;
    return props.map(function (prop) {
      if(prop.name.indexOf("title-") != -1) {
        return React.createElement(
          "h3", 
          {
            key: "pellet-title-" + prop.name
          }, 
          prop.value
        );
      }
      return React.createElement(
        "div", 
        {
          key: "pellet-" + prop.name,
          className: "pellet boxed"
        },
        React.createElement(
          "div",
          {
            className: "pellet-color",
            style: {
              backgroundColor: prop.value
            }
          }
        ),
        React.createElement(
          "div",
          {
            className: "pellet-data"
          },
          React.createElement(
            "code",
            {
              className: "heading"
            },
            "variable name"
          ),
          React.createElement(
            "code",
            {
              style: {
                marginBottom: "8px"
              }
            },
            prop.name
          ),
          React.createElement(
            "code",
            {
              className: "heading"
            },
            "value"
          ),
          React.createElement(
            "code",
            null,
            prop.value
          )
        )
      )
    });
  },

  renderIcons: function renderIcons() {
    var _this = this;
    var icons = this.props.icons;

    if(icons.icons == null || icons.icons == "") {
      return "";
    }

    var prefix = icons.preferences.fontPref.prefix;

    return [this.renderTitle("Icons"), _.map(icons.icons, function (icon) {
      return React.createElement(
        "div", 
        {
          key: "icon-" + icon.properties.name,
          className: "ico boxed"
        },
        React.createElement(
          "div",
          {
            className: "ico-ico"
          },
          React.createElement(
            "i",
            {
              className: prefix + icon.properties.name
            }
          )
        ),
        React.createElement(
          "div",
          {
            className: "ico-data"
          },
          React.createElement(
            "code",
            {
              className: "heading"
            },
            "class"
          ),
          React.createElement(
            "code",
            {
              style: {
                marginBottom: "8px"
              }
            },
            prefix + icon.properties.name
          ),
          React.createElement(
            "code",
            {
              className: "heading"
            },
            "value"
          ),
          React.createElement(
            "code",
            null,
            icon.properties.code.toString(16)
          )
        )
      )
    })];
  },

  renderBackgroundColor: function renderBackgroundColor(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(ExampleRow, { style: { backgroundColor: prop.value, border: "1px solid #f2f2f2" } });
      return _this.renderRow(prop, example);
    });
  },

  renderTextColor: function renderTextColor(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(
        ExampleRow,
        { style: { color: prop.value } },
        "The quick brown fox jumps over the lazy dog."
      );
      return _this.renderRow(prop, example);
    });
  },

  renderGradient: function renderGradient(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(ExampleRow, { style: { background: prop.value } });
      return _this.renderRow(prop, example);
    });
  },

  renderBorderColor: function renderBorderColor(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(ExampleRow, { style: { border: "2px solid " + prop.value } });
      return _this.renderRow(prop, example);
    });
  },

  renderBorderStyle: function renderBorderStyle(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(ExampleRow, { style: { border: prop.value } });
      return _this.renderRow(prop, example);
    });
  },

  renderHrColor: function renderHrColor(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(
        ExampleRow,
        null,
        React.createElement("hr", { style: { borderTopColor: prop.value } })
      );
      return _this.renderRow(prop, example);
    });
  },

  renderDropShadow: function renderDropShadow(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(ExampleRow, { style: { boxShadow: prop.value } });
      return _this.renderRow(prop, example);
    });
  },

  renderFont: function renderFont(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(
        ExampleRow,
        null,
        React.createElement(
          "div",
          { style: { fontFamily: prop.value } },
          "The quick brown fox jumps over the lazy dog."
        )
      );
      return _this.renderRow(prop, example);
    });
  },

  renderFontSize: function renderFontSize(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(
        ExampleRow,
        null,
        React.createElement(
          "div",
          { style: { fontSize: prop.value } },
          "The quick brown fox jumps over the lazy dog."
        )
      );
      return _this.renderRow(prop, example);
    });
  },

  renderLineHeight: function renderLineHeight(props) {
    var _this = this;
    return props.map(function (prop) {
      var vHeight = !isNaN(prop.value) ? "" + prop.value + "em" : prop.value;
      var example = React.createElement(
        ExampleRow,
        null,
        React.createElement(
          "div",
          { className: "line-height-example", style: { lineHeight: prop.value, backgroundSize: "100% " + vHeight } },
          "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec elementum odio et lacus rutrum molestie. Nunc arcu enim, elementum id feugiat at, venenatis quis erat. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Mauris sit amet commodo velit. In hac habitasse platea dictumst. Sed ac velit dolor."
        )
      );
      return _this.renderRow(prop, example);
    });
  },

  renderSpacing: function renderSpacing(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(
        ExampleRow,
        null,
        React.createElement("div", { className: "metric-box", style: { width: prop.value, height: prop.value } })
      );
      return _this.renderRow(prop, example);
    });
  },

  renderSize: function renderSize(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(
        ExampleRow
      );
      return _this.renderRow(prop, example);
    });
  },

  renderRadius: function renderRadius(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(
        ExampleRow,
        null,
        React.createElement("div", { className: "radius-box", style: { borderRadius: prop.value } })
      );
      return _this.renderRow(prop, example);
    });
  },

  renderMediaQuery: function renderMediaQuery(props) {
    var _this = this;
    return props.map(function (prop) {
      var example = React.createElement(ExampleRow, null);
      return _this.renderRow(prop, example);
    });
  },

  renderTitle: function renderTitle(heading) {
    return React.createElement(
      "h2", 
      {
        key: "title-" + camelCase(heading),
        style: {
          paddingLeft: "5px",
          paddingTop: ".5em"
        }
      }, 
      heading
    );
  },

  renderSection: function renderSection(type, heading, fn, disableRow) {
    var props = this.state.categories[type];
    if (!props) {
      return null;
    }
    var name = capitalize(camelCase(type));
    var render = typeof fn === "function" ? fn : this["render" + name];
    if(disableRow) {
      return [this.renderTitle(heading), render.call(this, props)];
    }
    return [this.renderRowHeader(type, heading), render.call(this, props)];
  },

  render: function render() {
    return React.createElement(
      "html",
      null,
      React.createElement(
        "head",
        null,
        React.createElement("meta", { charSet: "utf-8" }),
        React.createElement("meta", { httpEquiv: "X-UA-Compatible", content: "IE=edge" }),
        React.createElement(
          "title",
          null,
          "Theme Guide"
        ),
        React.createElement("meta", { name: "viewport", content: "width=device-width, initial-scale=1" }),
        React.createElement("link", { href: "style.css", rel: "stylesheet", type: "text/css" }),
        React.createElement("link", { href: "icons.css", rel: "stylesheet", type: "text/css" })
      ),
      React.createElement(
        "body",
        null,
        React.createElement(
          "header",
          { role: "banner", className: "banner" },
          React.createElement(
            "div",
            { className: "container" },
            React.createElement(
              "h1",
              null,
              "Theme Guide"
            )
          )
        ),
        React.createElement(
          "div",
          { className: "container" },
          React.createElement(
            "main",
            { role: "main" },
            React.createElement("div", null, this.renderSection("color", "Colors", false, true)),
            React.createElement("div", null, this.renderIcons()),
            React.createElement(
              "table",
              null,
              this.renderSection("text-color", "Text Colors"),
              this.renderSection("background-color", "Background Colors"),
              this.renderSection("gradient", "Gradients"),
              this.renderSection("border-color", "Border Colors"),
              this.renderSection("border-style", "Border Styles"),
              this.renderSection("hr-color", "Horizontal Rule Colors"),
              this.renderSection("drop-shadow", "Drop Shadows"),
              this.renderSection("inner-shadow", "Inner Drop Shadows", this.renderDropShadow),
              this.renderSection("font", "Fonts"),
              this.renderSection("font-size", "Font Sizes"),
              this.renderSection("line-height", "Line Heights"),
              this.renderSection("spacing", "Spacing"),
              this.renderSection("radius", "Radius"),
              this.renderSection("media-query", "Media Queries"),
              this.renderSection("size", "Sizes")
            )
          )
        )
      )
    );
  }
});

module.exports = function (json, icons) {
  return "\n    <!doctype html>\n    " + React.renderToStaticMarkup(React.createElement(Styleguide, { json: json, icons: icons })) + "\n  ";
};

function getPath(p) {
  return path.resolve(__dirname, p);
}